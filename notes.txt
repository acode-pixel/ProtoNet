TODO:
	create client module (handles broadcasting/re-broadcasting messages through the network, client side functions)
	create server modue (handles serving files and general sendig of files)
	create core (see notes for functions)

notes:
	use epoll to run caller without stopping program

	uses Port: 5657
	how transfering files work:
		client -> network : broadcasts a requested known file from the network
		network : other connected clients re-broadcasts the message to other clients
		network -> server : Server module detects a request from the network that has the available file
		server -> network : Server tries to retrace the path of the original request through the network to give transaction ID (computers between the path log the transaction ID for further use)
		network -> client : Client receives a transaction ID for file sharing.
		client -> network -> server : client sends an OK message to the server.
		client -> network -> server : bothe client and server now have a route in which data can be sent and received from one another (with the help of transaction IDs to guide the data)
		server -> network -> client : server sends an EOF message to the client through the server
		client -> network -> server : client sneds a request to destroy the path to the server
		server -> network -> client : server agrees	
		server & client : both server, network, and client delete their transaction ID removing the path of transmission
		END OF OPERATION

	core:
		handles and manages transaction IDs that a computer has

packet Format:
	0 - 3: SPTP
	4: Mode: (01)BROD, (02)TRAC, (03)DATA
	5 - 8: Dest: (Identifier of file requester)
	9 - 1024: Relevant Data

	Modes:
		BROD:
			9 : hops between client and server
			10 - 1024 : File client requested or message
		TRAC:
			9 : transaction ID
			10 - 13 : Identifier of sender
			14 : lifetime of trac ID per server loop (for redundancy)

Socket Modes:
	BROD - Socket is used for BROD packets
	TRAC - Socket is used for TRAC packets
	DATA - Socket is used for DATA packets
	NONE - Socket is not used at all

args:
./a.out client [inter] [name|none] [ip] [file request]
./a.out serv [inter] [ip to connect to|none] [serv name] [dir] 

challenges:
	creating socket manager

Socket Manager functions:
	read over sockets
	if server role:
		add any new clients that is requesting for a file to a Clients list with associated socket mode
		iterate over clients and do associated modes form said clients

		if BROD:
			Check if file is available on the server folder
			if available:
				send a TRAC packet to every connected socket with a UID
				update socket modes
			if not available:
				send a broadcast message NO_FILE with filename to the client

		if BROD with EOP:
			send an BROD.OK message to client
			remove client from client list

				
		
		


Server runtime loop:
	listen for any new connections (update Server.nConn)
	add any new sockets to a socket list
	check the socket list if a socket has data to be read (using epoll or kqueue)
	use Socket manager to manage socket operations for each socket (if any)
	print Sockets fds and their modes that are connected to the host

Client runtime loop:
	

files:
	client.c:
		CL_Init(char* inter, char name[]);
		connectToNetwork(char* IP, Client* cli);
		makeFileReq(int fd, char* IP, char File[]);
	server.c:
		Init(char* inter, char* ip, char* serverName, char Dir[]);
		delClient(int fd, Server* serv);
		add_Client(int fd, Server* serv);
		checkSockets(Serv* serv);
		ServerListen(Server* serv);
